public class arm {
     //functional motors
  private CANSparkMax armMotor1;
  private CANSparkMax armMotor2; 
  private CANSparkMax intakeMotor;
  private CANSparkMax shooterMotor1;
  private CANSparkMax shooterMotor2;
  private double funcModifier = 1;
  public double ampPosition;
  private double angleToEncoderPosition;
  private final double starterAngle;

   
  
    Arm() {
        //functional motors
        armMotor1 = new CANSparkMax(1, MotorType.kBrushless);
        armMotor2 = new CANSparkMax(2, MotorType.kBrushless);
        intakeMotor = new CANSparkMax(3, MotorType.kBrushless);
        shooterMotor1 = new CANSparkMax(4, MotorType.kBrushless);
        shooterMotor2 = new CANSparkMax(9, MotorType.kBrushless);
    
    }

    public double getArmAngle {
    double currentEncoderPosition = armMotor1.getEncoder().getPosition();
    currentAngle = currentEncoderPosition * angleToEncoderPosition + starterAngle;
    return currentAngle;
  }
  // shooter
  public void shooter(double power) {
      intakeMotor.set(power);
      shooterMotor1.set(power);
      shooterMotor2.set(power);
  }
  // intake
  public void intake(double power) {
    //enableDrive = false;
    // if there is no note the intake motor runs
    while (checkSensorandNotify() == true){
    intakeMotor.set(power);
    //once the note is in the intake the motor stops
    if (checkSensorandNotify() == false) {
    intakeMotor.set(0); }
    //enableDrive = true;
  }}
}
    public void setMotorPower (double power) {
        final double maxPower = 0.5
        if (power > maxPower) {
            power = maxPower;
        }
        else if (power < -maxPower) {
            power = -maxPower;
        }
        armMotor1.set(power);
        armMotor2.set(power);
    }

    public void moveToPosition(double pos) {
        double Kp = 0; // change to actual after testing*************
        double error = pos - getArmAngle(); // current position (after converting)*****
        double power = Kp * error;
        setMotorPower(power);

    }
}
